[{"D:\\project\\contact-details\\src\\index.js":"1","D:\\project\\contact-details\\src\\reportWebVitals.js":"2","D:\\project\\contact-details\\src\\App.js":"3","D:\\project\\contact-details\\src\\redux\\store.js":"4","D:\\project\\contact-details\\src\\redux\\contactReducer.js":"5","D:\\project\\contact-details\\src\\redux\\contactType.js":"6","D:\\project\\contact-details\\src\\component\\ContactList.js":"7","D:\\project\\contact-details\\src\\redux\\contactAction.js":"8","D:\\project\\contact-details\\src\\redux\\localDB.js":"9","D:\\project\\contact-details\\src\\component\\ReUseContact.js":"10"},{"size":573,"mtime":1608271426164,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1076,"mtime":1608399611493,"results":"14","hashOfConfig":"12"},{"size":312,"mtime":1608271290613,"results":"15","hashOfConfig":"12"},{"size":1143,"mtime":1608568447378,"results":"16","hashOfConfig":"12"},{"size":172,"mtime":1608568374560,"results":"17","hashOfConfig":"12"},{"size":4116,"mtime":1608620195902,"results":"18","hashOfConfig":"12"},{"size":1590,"mtime":1608620195902,"results":"19","hashOfConfig":"12"},{"size":637,"mtime":1608294129068,"results":"20","hashOfConfig":"12"},{"size":7523,"mtime":1608620195900,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1c6iwlx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"D:\\project\\contact-details\\src\\index.js",[],["44","45"],"D:\\project\\contact-details\\src\\reportWebVitals.js",[],"D:\\project\\contact-details\\src\\App.js",[],"D:\\project\\contact-details\\src\\redux\\store.js",[],"D:\\project\\contact-details\\src\\redux\\contactReducer.js",[],"D:\\project\\contact-details\\src\\redux\\contactType.js",[],"D:\\project\\contact-details\\src\\component\\ContactList.js",["46","47","48"],"D:\\project\\contact-details\\src\\redux\\contactAction.js",[],"D:\\project\\contact-details\\src\\redux\\localDB.js",[],"D:\\project\\contact-details\\src\\component\\ReUseContact.js",["49"],"import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addContact,editContact } from '../redux/contactAction';\r\n\r\nconst ReUseContact= (props)=>{\r\n    let [ToDisplay,ToDoDisplay]= useState({})\r\n    let [currentContact,TodoContact]= useState({\r\n        id:\"\",\r\n        name:\"\",\r\n        email:\"\",\r\n        phonenumber:\"\",\r\n        errors:{\r\n            name:\"\",\r\n            email:\"\",\r\n            phonenumber:\"\"\r\n        }\r\n    })\r\n    useEffect(()=>{\r\n        if(props.pageAction.currentPage===\"view\"){\r\n           // console.log(props.pageAction)\r\n           let display= props.responce.filter(el=>el.id===props.pageAction.selectedData)\r\n           if(!display.length) props.forwardPage({currentPage:\"\"})\r\n           ToDoDisplay({DisplayData:display})\r\n        }else if(props.pageAction.currentPage===\"edit\"){\r\n            let display= props.responce.filter(el=>el.id===props.pageAction.selectedData)  \r\n           // console.log(display.length)\r\n            if(!display.length) props.forwardPage({currentPage:\"\"})\r\n            else{\r\n                TodoContact({...currentContact,\r\n                    name:display[0].name,\r\n                    email:display[0].email,\r\n                    phonenumber:display[0].phonenumber,\r\n                    id:display[0].id})\r\n            }\r\n\r\n        }\r\n    },[props.pageAction.currentPage,props.pageAction.selectedData,props.responce])\r\n\r\n    const handleChange =(e)=>{\r\n        TodoContact({\r\n            ...currentContact,\r\n            [e.target.name]:e.target.value.trim(),\r\n            errors:{\r\n                ...currentContact.errors,\r\n                [e.target.name]:\"\"\r\n            }\r\n        })\r\n    }\r\n    const validate= () =>{\r\n        if(!currentContact.name){\r\n            TodoContact({\r\n                ...currentContact,\r\n                errors:{\r\n                    ...currentContact.errors,\r\n                    name:\"Enter the Name\"\r\n                }\r\n            }) \r\n            return false\r\n        }else if(!currentContact.email){\r\n            TodoContact({\r\n                ...currentContact,\r\n                errors:{\r\n                    ...currentContact.errors,\r\n                    email:\"Enter the Email Address\"\r\n                }\r\n            }) \r\n            return false\r\n        }\r\n        else if(!/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/.test(currentContact.email)){\r\n            TodoContact({\r\n                ...currentContact,\r\n                errors:{\r\n                    ...currentContact.errors,\r\n                    email:\"Enter the Valid Email Address\"\r\n                }\r\n            }) \r\n            return false\r\n        }\r\n        else if(!currentContact.phonenumber){\r\n            TodoContact({\r\n                ...currentContact,\r\n                errors:{\r\n                    ...currentContact.errors,\r\n                    phonenumber:\"Enter the Phone Number\"\r\n                }\r\n            }) \r\n            return false\r\n        }\r\n        return true\r\n\r\n    }\r\n    const AddContact=()=>{\r\n        let isValid=validate();\r\n        let {name,email,phonenumber}=currentContact\r\n        if(isValid){\r\n            props.addcontactstore({name,email,phonenumber},props.responce)\r\n            props.forwardPage({currentPage:\"\"})\r\n        }\r\n    }\r\n\r\n    const editContact=()=>{\r\n        let isValid=validate()\r\n        let {id,name,email,phonenumber}=currentContact\r\n        if(isValid){\r\n            props.editcontactstore({id,name,email,phonenumber},props.responce)\r\n            props.forwardPage({currentPage:\"\"})\r\n        }\r\n        \r\n    }\r\n    return(\r\n        <React.Fragment>\r\n            {props.pageAction.currentPage === \"add\" || props.pageAction.currentPage === \"edit\" ?\r\n                <div className=\"card p-4 detail-card\" >\r\n                    <div className=\"w-100\" >\r\n                        <div className=\"mr-auto  px-3\">\r\n                            <label className=\"mb-1 text-capitalize font-weight-bold\">Name</label>\r\n                            <input className=\"form-control mb-1\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                onChange={(e) => handleChange(e)}\r\n                                value={currentContact.name}\r\n                            />\r\n                            {currentContact.errors.name ? <p className=\"text-danger\">{currentContact.errors.name}</p> : null}\r\n                            <label className=\"mb-1 text-capitalize font-weight-bold\">email</label>\r\n                            <input className=\"form-control mb-1\"\r\n                                type=\"text\"\r\n                                name=\"email\"\r\n                                onChange={(e) => handleChange(e)}\r\n                                value={currentContact.email}\r\n                            />\r\n                            {currentContact.errors.email ? <p className=\"text-danger\">{currentContact.errors.email}</p> : null}\r\n                            <label className=\"mb-1 text-capitalize font-weight-bold\">Phone Number</label>\r\n                            <input className=\"form-control mb-2\"\r\n                                type=\"number\"\r\n                                name=\"phonenumber\"\r\n                                onChange={(e) => handleChange(e)}\r\n                                value={currentContact.phonenumber}\r\n                            />\r\n                            {currentContact.errors.phonenumber ? <p className=\"text-danger\">{currentContact.errors.phonenumber}</p> : null}\r\n                        </div>\r\n                    </div>\r\n                    {props.pageAction.currentPage === \"edit\" ?\r\n                        <button className=\"btn btn-primary ml-3 align-self-center\" onClick={editContact} > Edit Contact </button>\r\n                        :\r\n                        <button className=\"btn btn-primary ml-3 align-self-center\" onClick={AddContact} > Add Contact </button>}\r\n                </div>\r\n                : props.pageAction.currentPage === \"view\" && ToDisplay.DisplayData ?\r\n                    <div className=\"card p-4 detail-card\" >\r\n                        {/* <img src={Selecteditems.thumbnailUrl} alt=\"thumbnail\" className=\"card-image\" /> */}\r\n                        <div className=\"profile-dp\"> {(ToDisplay.DisplayData[0].name.match(/[a-zA-Z]/)||['NA']).pop()}</div>\r\n                        <div className=\"contents\">\r\n                            <label className=\"mb-0 font-weight-bold\">Name</label>\r\n                            <div className=\"mb-4\">{ToDisplay.DisplayData[0].name}</div>\r\n                            <label className=\"mb-0 font-weight-bold\">email</label>\r\n                            <div className=\"mb-4\">{ToDisplay.DisplayData[0].email}</div>\r\n                            <label className=\"mb-0 font-weight-bold\">Phone Number</label>\r\n                            <div>{ToDisplay.DisplayData[0].phonenumber}</div>\r\n                        </div>\r\n                    </div>\r\n                    : null\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps =state=>{\r\n    return {\r\n        responce:state.contact.contacts\r\n    }\r\n}\r\nconst mapDispatchToProps =dispatch=>{\r\n    return {\r\n         addcontactstore: (data,dbData) =>{dispatch(addContact(data,dbData))},\r\n         editcontactstore: (data,dbData) =>{dispatch(editContact(data,dbData))}\r\n    }\r\n}\r\n\r\n//export default ReUseContact\r\n export default connect(mapStateToProps,mapDispatchToProps)(ReUseContact);",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":7,"column":24,"nodeType":"56","messageId":"57","endLine":7,"endColumn":40},{"ruleId":"58","severity":1,"message":"59","line":16,"column":38,"nodeType":"60","endLine":16,"endColumn":40,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"62","line":24,"column":7,"nodeType":"60","endLine":24,"endColumn":42,"suggestions":"63"},{"ruleId":"58","severity":1,"message":"64","line":37,"column":7,"nodeType":"60","endLine":37,"endColumn":82,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'ActionToDispalay' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["68"],"React Hook useEffect has missing dependencies: 'ProcessedData' and 'props.responce'. Either include them or remove the dependency array.",["69"],"React Hook useEffect has missing dependencies: 'currentContact' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [props]",{"range":"77","text":"78"},"Update the dependencies array to be: [props.responce.length, DisplayData, props.responce, ProcessedData]",{"range":"79","text":"80"},"Update the dependencies array to be: [currentContact, props, props.pageAction.currentPage, props.pageAction.selectedData, props.responce]",{"range":"81","text":"82"},[501,503],"[props]",[769,804],"[props.responce.length, DisplayData, props.responce, ProcessedData]",[1344,1419],"[currentContact, props, props.pageAction.currentPage, props.pageAction.selectedData, props.responce]"]